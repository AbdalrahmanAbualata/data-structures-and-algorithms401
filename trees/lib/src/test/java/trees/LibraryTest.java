/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package trees;

import org.junit.Test;

import java.util.Arrays;
import java.util.List;

import static org.junit.Assert.*;

public class LibraryTest {
    @Test
    public void testCreateAnEmptyTree(){
        BinaryTree<Integer> tree = new BinaryTree<>();
        assertNotNull(tree);
    }

    @Test
    public void testCreateATreeWithSingleRootNode(){
        BinaryTree<Integer> tree = new BinaryTree<>();
        tree.add(10);
        String expected="BinaryTree{ root=Node{value=10, left=null, right=null}numOfNodes=1}";

        assertEquals(expected,tree.toString());
    }

    @Test
    public void testAddLeftAndRightChildrenToRootNode(){
        BinaryTree<Integer> tree = new BinaryTree<>();
        tree.add(10);
        tree.add(5);
        tree.add(8);
        String expected="BinaryTree{ root=Node{value=10, left=Node{value=5, left=null, right=null}, right=Node{value=8, left=null, right=null}}numOfNodes=3}";

        assertEquals(expected,tree.toString());
    }

    @Test
    public void testReturnCollectionFromPreOrderTraversal(){
        BinaryTree<Integer> tree = new BinaryTree<>();
        tree.add(20);
        tree.add(5);
        tree.add(11);
        List<Integer> expected=tree.preOrder(tree.root);
        assertArrayEquals(Arrays.asList(20,5,11).toArray(), expected.toArray());
    }
//
    @Test
    public void testReturnCollectionFromInOrderTraversal(){
        BinaryTree<Integer> tree = new BinaryTree<>();
        tree.add(10);
        tree.add(5);
        tree.add(8);
        List<Integer> expected=tree.inOrder(tree.root);
        assertArrayEquals(Arrays.asList(5,10,8).toArray(), expected.toArray());
    }

    @Test
    public void testReturnCollectionFromPostOrderTraversal(){
        BinaryTree<Integer> tree = new BinaryTree<>();
        tree.add(10);
        tree.add(5);
        tree.add(8);
        List<Integer> expected=tree.postOrder(tree.root);
        assertArrayEquals(Arrays.asList(5,8,10).toArray(), expected.toArray());
    }
    @Test
    public void testFindMaximumValueMethod(){
        BinaryTree<Integer> tree = new BinaryTree<>();
        tree.add(10);
        tree.add(5);
        tree.add(22);
        tree.add(8);
        assertEquals(22, tree.findMaximumValue(tree.root));
    }
    @Test
    public void testFindMaximumValueMethodIfTheTreeIsEmpty(){
        BinaryTree<Integer> tree = new BinaryTree<>();

        assertEquals(0, tree.findMaximumValue(tree.root));
    }
    @Test
    public void testBreadthFirstSearchInNormalCase(){
        BinaryTree<Integer> tree = new BinaryTree<>();
        tree.add(1);
        tree.add(2);
        tree.add(3);
        tree.add(4);
        List<Integer> actual = tree.breadthFirstSearch(tree);
        assertArrayEquals(Arrays.asList(1,2,3,4).toArray(),actual.toArray());
    }

    @Test
    public void testBreadthFirstSearchIfTreeIsEmpty(){
        BinaryTree<Integer> tree = new BinaryTree<>();
        List<Integer> actual = tree.breadthFirstSearch(tree);
        assertArrayEquals(Arrays.asList().toArray(),actual.toArray());
    }


}
