/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package graph;

import org.junit.Test;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;

import static org.junit.Assert.*;

public class AppTest {
    @Test public void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull("app should have a greeting", classUnderTest.getGreeting());
    }

    @Test
    public void emptyGraph(){
        Graph graph = new Graph();
        assertEquals( 0, graph.getSize());
    }

    @Test
    public void addNode() {
        Graph graph = new Graph();
        Node cat = graph.addNode("cat");
        Node dog = graph.addNode("dog");
        Node hamster = graph.addNode("hamster");

        assertTrue( graph.getSize() == 3);
        assertTrue( graph.getNodes().contains(cat));
        assertTrue( graph.getNodes().contains(dog));
        assertTrue( graph.getNodes().contains(hamster));
    }

    @Test
    public void addEdge() {
        Graph graph = new Graph();
        Node cat = graph.addNode("cat");
        Node dog = graph.addNode("dog");
        Node hamster = graph.addNode("hamster");
try {
    graph.addEdge("cat", "dog", 4);
    int sizeNeighborsCat = cat.getNeighbors().size();
    int sizeNeighborsDog = dog.getNeighbors().size();
    assertEquals(sizeNeighborsCat,1);
    assertEquals(sizeNeighborsDog,1);
    graph.addEdge("cat", "hamster", 5);
    int sizeNeighborsCat2 = cat.getNeighbors().size();
    assertEquals(sizeNeighborsCat2,2);

}
           catch(NodeNotFoundException ex){
            System.out.println(ex.getMessage());
        }

    }
//
    @Test
    public void getNodes() {
        Graph graph = new Graph();
        Node cat = graph.addNode("cat");
        Node dog = graph.addNode("dog");
        Node hamster = graph.addNode("hamster");

        List expected = new ArrayList();
        expected.add(cat);
        expected.add(dog);
        expected.add(hamster);

        assertTrue( graph.getNodes().equals(expected));
    }



//
    @Test
    public void getNeighbors() {
        Graph graph = new Graph();
        Node cat = graph.addNode("cat");
        Node dog = graph.addNode("dog");
        Node hamster = graph.addNode("hamster");

        Neighbor neighborForNode1 = new Neighbor(cat,2);
        Neighbor neighborForNode2 = new Neighbor(dog,2);
        cat.addNeighbor(neighborForNode1);
        dog.addNeighbor(neighborForNode2);

        HashSet expected = new HashSet<>();
        expected.add("dog");

try {
    assertEquals(expected.size(), graph.getNeighbors("cat").size());
}   catch(NodeNotFoundException ex){
    System.out.println(ex.getMessage());
}
//
    }

    @Test
    public void getSize() {
        Graph graph = new Graph();
        graph.addNode("cat");
        graph.addNode("dog");
        graph.addNode("hamster");

        assertEquals( 3,  graph.getSize());

        graph.addNode("rabbit");
        graph.addNode("frog");
        graph.addNode("guinea pig");
        graph.addNode("cow");

        assertEquals( 7,  graph.getSize());
    }
///////////////   graph-breadth-first       ********************************************


    @Test
    public void testBFT_InNormalCase() {
        try {
            Graph <String> graph1 = new Graph();

            graph1.addNode("Pandora");
            graph1.addNode("Arendelle");
            graph1.addNode("Metroville");
            graph1.addNode("Monstroplolis");
            graph1.addNode("Narnia");
            graph1.addNode("Naboo");

            graph1.addEdge("Pandora","Arendelle",0);
            graph1.addEdge("Arendelle","Metroville",0);
            graph1.addEdge("Arendelle","Monstroplolis",0);

            graph1.addEdge("Metroville","Narnia",0);
            graph1.addEdge("Metroville","Naboo",0);
            graph1.addEdge("Metroville","Monstroplolis",0);

            graph1.addEdge("Monstroplolis","Naboo",0);
            graph1.addEdge("Narnia","Naboo",0);
            List<String> bft = graph1.BFT("Pandora");
            String expected = "[Pandora, Arendelle, Metroville, Monstroplolis, Narnia, Naboo]";
            assertEquals(expected, bft.toString());
        }
        catch(NodeNotFoundException ex){
            System.out.println(ex.getMessage());
        }
    }

    @Test
    public void testBFT_OnEmptyGraph() {
        Graph <String> graph1 = new Graph();

        try {
            List<String> bft = graph1.BFT("Pandora");
        }
        catch(NodeNotFoundException ex){
            assertEquals("Node not found..( Pandora )!",ex.getMessage());
        }
    }

    @Test
    public void testBFT_OnGraphHasNoEdges() {
        Graph <String> graph1 = new Graph();

        graph1.addNode("Pandora");
        graph1.addNode("Arendelle");
        graph1.addNode("Metroville");
        graph1.addNode("Monstroplolis");
        graph1.addNode("Narnia");
        graph1.addNode("Naboo");

        try {
            List<String> bft = graph1.BFT("Pandora");
            String expected = "[Pandora]";
            assertEquals(expected, bft.toString());
        }
        catch(NodeNotFoundException ex){
            System.out.println(ex.getMessage());
        }
    }

    @Test
    public void testBFT_OnConnectedPartOfTheGraph() {
        Graph <String> graph1 = new Graph();

        graph1.addNode("Pandora");
        graph1.addNode("Arendelle");
        graph1.addNode("Metroville");
        graph1.addNode("Monstroplolis");
        graph1.addNode("Narnia");
        graph1.addNode("Naboo");

        try {
            graph1.addEdge("Pandora","Arendelle",0);
            graph1.addEdge("Arendelle","Metroville",0);
            graph1.addEdge("Arendelle","Monstroplolis",0);

            List<String> bft = graph1.BFT("Pandora");
            String expected = "[Pandora, Arendelle, Metroville, Monstroplolis]";
            assertEquals(expected, bft.toString());
        }
        catch(NodeNotFoundException ex){
            System.out.println(ex.getMessage());
        }
    }

    ///////////////   graph-breadth-first       ********************************************

    ////// code challenge business trip*******************************************
    @Test
    public void testGetEdgeInNormalCase() {
        try {
            Graph <String> graph1 = new Graph();

            graph1.addNode("Pandora");
            graph1.addNode("Arendelle");
            graph1.addNode("Metroville");
            graph1.addNode("Monstroplolis");
            graph1.addNode("Narnia");
            graph1.addNode("Naboo");

            graph1.addEdge("Pandora","Arendelle",150);
            graph1.addEdge("Pandora","Metroville",82);
            graph1.addEdge("Arendelle","Metroville",99);
            graph1.addEdge("Arendelle","Monstroplolis",42);

            graph1.addEdge("Metroville","Narnia",37);
            graph1.addEdge("Metroville","Naboo",26);
            graph1.addEdge("Metroville","Monstroplolis",105);

            graph1.addEdge("Monstroplolis","Naboo",73);
            graph1.addEdge("Narnia","Naboo",250);

            String[] nodes = {"Metroville", "Pandora"};
            String output = graph1.businessTrip(nodes);
            String expected = "True, $82";
            assertEquals(expected,output);
        }
        catch(NodeNotFoundException ex){
            System.out.println(ex.getMessage());
        }
    }

    @Test
    public void testGetEdge_OnEmptyGraphAndEmptyNodesArray() {
        Graph <String> graph1 = new Graph();

        try {
            String[] nodes = {};
            String output = graph1.businessTrip(nodes);
            String expected = "False, $0";
            assertEquals(expected,output);
        }
        catch(NodeNotFoundException ex){
            System.out.println(ex.getMessage());
        }
    }

    @Test
    public void testGetEdge_OnEmptyGraphAndNonEmptyNodesArray() {
        Graph <String> graph1 = new Graph();

        try {
            String[] nodes = {"Pandora", "Metroville"};
            String output = graph1.businessTrip(nodes);
            String expected = "False, $0";
            assertEquals(expected,output);
        }
        catch(NodeNotFoundException ex){
            assertEquals("Node not found..( Pandora )!",ex.getMessage());
        }
    }


    @Test
    public void testGetEdge_OnGraphHasNoEdges() {
        Graph <String> graph1 = new Graph();

        graph1.addNode("Pandora");
        graph1.addNode("Arendelle");
        graph1.addNode("Metroville");
        graph1.addNode("Monstroplolis");
        graph1.addNode("Narnia");
        graph1.addNode("Naboo");

        try {
            String[] nodes = {"Pandora", "Metroville"};
            String output = graph1.businessTrip(nodes);
            String expected = "False, $0";
            assertEquals(expected,output);
        }
        catch(NodeNotFoundException ex){
            System.out.println(ex.getMessage());
        }
    }

    @Test
    public void testGetEdges_InNoRouteExistCase() {
        Graph <String> graph1 = new Graph();

        graph1.addNode("Pandora");
        graph1.addNode("Arendelle");
        graph1.addNode("Metroville");
        graph1.addNode("Monstroplolis");
        graph1.addNode("Narnia");
        graph1.addNode("Naboo");
        try {

            graph1.addEdge("Pandora","Arendelle",150);
            graph1.addEdge("Pandora","Metroville",82);
            graph1.addEdge("Arendelle","Metroville",99);
            graph1.addEdge("Arendelle","Monstroplolis",42);

            graph1.addEdge("Metroville","Narnia",37);
            graph1.addEdge("Metroville","Naboo",26);
            graph1.addEdge("Metroville","Monstroplolis",105);

            graph1.addEdge("Monstroplolis","Naboo",73);
            graph1.addEdge("Narnia","Naboo",250);

            String[] nodes = {"Pandora", "Naboo"};
            String output = graph1.businessTrip(nodes);
            String expected = "False, $0";
            assertEquals(expected,output);
        }
        catch(NodeNotFoundException ex){
            System.out.println(ex.getMessage());
        }
    }
    ////// code challenge business trip*******************************************

    ////// ************************ code challenge graph-depth-first   *******************************************

    @Test
    public void testDFT_InNormalCase() {
        try {
            Graph <String> graph1 = new Graph();

            graph1.addNode("A");
            graph1.addNode("B");
            graph1.addNode("C");
            graph1.addNode("D");
            graph1.addNode("E");
            graph1.addNode("F");
            graph1.addNode("G");
            graph1.addNode("H");

            graph1.addEdge("A","B",0);
            graph1.addEdge("A","D",0);
            graph1.addEdge("B","C",0);
            graph1.addEdge("B","D",0);
            graph1.addEdge("C","G",0);
            graph1.addEdge("D","E",0);
            graph1.addEdge("D","H",0);
            graph1.addEdge("D","F",0);
            graph1.addEdge("F","H",0);

            List<String> dft = graph1.DFT("A");
            String expected = "[A, B, C, G, D, E, H, F]";
            assertEquals(expected, dft.toString());
        }
        catch(NodeNotFoundException ex){
            System.out.println(ex.getMessage());
        }
    }

    @Test
    public void testDFT_OnEmptyGraph() {
        Graph <String> graph1 = new Graph();

        try {
            List<String> dft = graph1.BFT("A");
        }
        catch(NodeNotFoundException ex){
            assertEquals("Node not found..( A )!",ex.getMessage());
        }
    }

    @Test
    public void testDFT_OnGraphHasNoEdges() {
        Graph <String> graph1 = new Graph();

        graph1.addNode("A");
        graph1.addNode("B");
        graph1.addNode("C");
        graph1.addNode("D");
        graph1.addNode("E");
        graph1.addNode("F");
        graph1.addNode("G");
        graph1.addNode("H");

        try {
            List<String> dft = graph1.DFT("A");
            String expected = "[A]";
            assertEquals(expected, dft.toString());
        }
        catch(NodeNotFoundException ex){
            System.out.println(ex.getMessage());
        }
    }

    @Test
    public void testDFT_OnConnectedPartOfTheGraph() {
        Graph <String> graph1 = new Graph();

        graph1.addNode("A");
        graph1.addNode("B");
        graph1.addNode("C");
        graph1.addNode("D");
        graph1.addNode("E");
        graph1.addNode("F");
        graph1.addNode("G");
        graph1.addNode("H");



        try {
            graph1.addEdge("A","B",0);
            graph1.addEdge("A","D",0);
            graph1.addEdge("B","C",0);
            graph1.addEdge("B","D",0);
            graph1.addEdge("C","G",0);

            List<String> dft = graph1.DFT("A");
            String expected = "[A, B, C, G, D]";
            assertEquals(expected, dft.toString());
        }
        catch(NodeNotFoundException ex){
            System.out.println(ex.getMessage());
        }
    }
    ////// ************************ code challenge graph-depth-first   *******************************************
}
